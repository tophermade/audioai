extends layout

block content
  .row
    .col-12
      .card.shadow
        .card-header.bg-primary.text-white
          .d-flex.justify-content-between.align-items-center
            h2.card-title.mb-0
              i.fas.fa-eye.me-2
              | Translation Details
            .btn-group
              a.btn.btn-outline-light.btn-sm(href='/history')
                i.fas.fa-arrow-left.me-1
                | Back to History
              button.btn.btn-outline-light.btn-sm#downloadAllBtn(style='display: none;')
                i.fas.fa-download.me-1
                | Download All Audio

        .card-body#translationContent
          // Content will be loaded by JavaScript from localStorage
          .text-center.py-5
            .spinner-border.text-primary(role='status')
            p.mt-3.text-muted Loading translation details...
          
      .alert.alert-danger#errorMessage(style='display: none;')
        i.fas.fa-exclamation-triangle.me-2
        span#errorText Translation not found
        .mt-3
          a.btn.btn-primary(href='/history')
            i.fas.fa-arrow-left.me-1
            | Back to History

block scripts
  script.
    // LocalStorage management constants
    const STORAGE_KEY = 'aiAudioTranslationHistory';
    const translationId = '#{translationId}';
    let currentTranslation = null;
    
    // Language flag mapping
    const languageFlags = {
      'zh-CN': 'üá®üá≥',
      'ru': 'üá∑üá∫',
      'pl': 'üáµüá±',
      'es': 'üá™üá∏',
      'pt': 'üáµüáπ',
      'de': 'üá©üá™',
      'fr': 'üá´üá∑',
      'ja': 'üáØüáµ',
      'ko': 'üá∞üá∑'
    };
    
    $(document).ready(function() {
      console.log('Translation view page loaded for ID:', translationId);
      
      // Load translation from localStorage
      loadTranslationFromStorage();
    });
    
    function getTranslationHistory() {
      try {
        const history = localStorage.getItem(STORAGE_KEY);
        return history ? JSON.parse(history) : [];
      } catch (error) {
        console.error('Failed to load translation history:', error);
        return [];
      }
    }
    
    function loadTranslationFromStorage() {
      const history = getTranslationHistory();
      currentTranslation = history.find(item => item.id === translationId);
      
      if (!currentTranslation) {
        showError('Translation not found. It may have been deleted from your browser storage.');
        return;
      }
      
      displayTranslation(currentTranslation);
      
      // Check if any translations have audio
      const hasAudio = currentTranslation.translations.some(t => t.audioGenerated && t.audioUrl);
      if (hasAudio) {
        $('#downloadAllBtn').show();
      }
    }
    
    function showError(message) {
      $('#translationContent').hide();
      $('#errorText').text(message);
      $('#errorMessage').show();
    }
    
    function displayTranslation(translation) {
      const content = `
        // Original Text Section
        <div class="row mb-4">
          <div class="col-12">
            <div class="card border-0 bg-light">
              <div class="card-header bg-secondary text-white">
                <h5 class="card-title mb-0">
                  <i class="fas fa-flag-usa me-2"></i>
                  Original Text (English)
                </h5>
              </div>
              <div class="card-body">
                <p class="mb-0 fs-5">${translation.originalText}</p>
                <div class="mt-2">
                  <small class="text-muted">
                    <i class="fas fa-clock me-1"></i>
                    Created: ${new Date(translation.createdAt).toLocaleString()}
                  </small>
                </div>
              </div>
            </div>
          </div>
        </div>

        // Translations Section
        <div class="row mb-3">
          <div class="col-12">
            <h4 class="mb-3">
              <i class="fas fa-language me-2"></i>
              Translations (${translation.translations.length} languages)
            </h4>
          </div>
        </div>

        <div class="row">
          ${translation.translations.map((translationItem, index) => `
            <div class="col-lg-6 col-md-12 mb-4">
              <div class="card h-100 ${translationItem.audioGenerated ? 'border-success' : 'border-warning'}">
                <div class="card-header ${translationItem.audioGenerated ? 'bg-success text-white' : 'bg-warning text-dark'}">
                  <div class="d-flex justify-content-between align-items-center">
                    <h6 class="card-title mb-0">
                      <span class="me-2">${languageFlags[translationItem.language] || 'üåê'}</span>
                      ${translationItem.languageName}
                      <small class="opacity-75 ms-1">(${translationItem.language})</small>
                    </h6>
                    ${translationItem.audioGenerated ? 
                      '<div class="badge bg-light text-success"><i class="fas fa-check-circle me-1"></i>Audio Ready</div>' :
                      '<div class="badge bg-light text-warning"><i class="fas fa-exclamation-triangle me-1"></i>No Audio</div>'
                    }
                  </div>
                </div>
                <div class="card-body">
                  <div class="translation-text mb-3 p-3 bg-light rounded">
                    ${translationItem.text}
                  </div>
                  
                  ${translationItem.audioGenerated && translationItem.audioUrl ? `
                    <div class="audio-controls text-center">
                      <audio class="audio-player mb-3" controls style="width: 100%;">
                        <source src="${translationItem.audioUrl}" type="audio/mpeg">
                        Your browser does not support the audio element.
                      </audio>
                      <div class="d-grid">
                        <button class="btn btn-success download-btn" data-language="${translationItem.language}" data-audio-url="${translationItem.audioUrl}">
                          <i class="fas fa-download me-1"></i>
                          Download ${translationItem.languageName} Audio
                        </button>
                      </div>
                    </div>
                  ` : `
                    <div class="text-center">
                      <div class="alert alert-warning mb-3">
                        <i class="fas fa-exclamation-circle me-2"></i>
                        Audio not available for this translation
                      </div>
                      <div class="d-grid">
                        <button class="btn btn-warning retry-audio-btn" data-language="${translationItem.language}" data-index="${index}" data-translation-id="${translation.id}">
                          <i class="fas fa-redo me-1"></i>
                          Generate Audio for ${translationItem.languageName}
                        </button>
                      </div>
                    </div>
                  `}
                </div>
              </div>
            </div>
          `).join('')}
        </div>
      `;
      
      $('#translationContent').html(content);
    }
    
    // Event handlers
    $(document).on('click', '.download-btn', function(e) {
      e.preventDefault();
      e.stopPropagation();
      const language = $(this).data('language');
      const audioUrl = $(this).data('audio-url');
      downloadAudio(language, audioUrl);
    });
    
    $(document).on('click', '.retry-audio-btn', function(e) {
      e.preventDefault();
      e.stopPropagation();
      const language = $(this).data('language');
      const index = $(this).data('index');
      const translationId = $(this).data('translation-id');
      retryAudioGeneration(language, index, translationId);
    });
    
    $('#downloadAllBtn').on('click', function(e) {
      e.preventDefault();
      downloadAllAudio();
    });
    
    function updateTranslationInStorage(updatedTranslation) {
      try {
        const history = getTranslationHistory();
        const index = history.findIndex(item => item.id === updatedTranslation.id);
        if (index !== -1) {
          history[index] = updatedTranslation;
          localStorage.setItem(STORAGE_KEY, JSON.stringify(history));
          return true;
        }
        return false;
      } catch (error) {
        console.error('Failed to update translation in storage:', error);
        return false;
      }
    }
    
    // Download single audio function
    function downloadAudio(language, audioUrl) {
      console.log('downloadAudio called with:', language, audioUrl);
      if (audioUrl) {
        const link = document.createElement('a');
        link.href = audioUrl;
        link.download = `translation_${language}_${Date.now()}.mp3`;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        
        showAlert(`Audio file for ${language} downloaded!`, 'success');
      } else {
        showAlert('Audio URL not available for download.', 'warning');
      }
    }
    
    // Download all audio files
    function downloadAllAudio() {
      if (!currentTranslation || !currentTranslation.translations) {
        showAlert('No translation data available', 'warning');
        return;
      }
      
      let downloadCount = 0;
      currentTranslation.translations.forEach(translation => {
        if (translation.audioGenerated && translation.audioUrl) {
          setTimeout(() => {
            downloadAudio(translation.language, translation.audioUrl);
          }, downloadCount * 500); // Stagger downloads by 500ms
          downloadCount++;
        }
      });
      
      if (downloadCount === 0) {
        showAlert('No audio files available for download', 'warning');
      } else {
        showAlert(`Downloading ${downloadCount} audio files...`, 'info');
      }
    }
    
    // Retry audio generation for a single language
    async function retryAudioGeneration(language, index, translationId) {
      const retryBtn = $(`.retry-audio-btn[data-index="${index}"]`);
      const originalText = retryBtn.html();
      retryBtn.prop('disabled', true).html('<i class="fas fa-spinner fa-spin me-1"></i>Generating...');
      
      try {
        const translationData = currentTranslation.translations[index];
        
        const requestBody = {
          text: translationData.text,
          language: language,
          languageName: translationData.languageName,
          voiceId: null // Use default voice
        };
        
        // Generate audio using the single audio endpoint
        const response = await fetch('/api/audio/generate-single', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(requestBody)
        });

        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.message || 'Audio generation failed');
        }

        const data = await response.json();
        
        if (data.success) {
          // Update the translation in localStorage
          currentTranslation.translations[index].audioUrl = data.audioUrl;
          currentTranslation.translations[index].audioGenerated = true;
          updateTranslationInStorage(currentTranslation);
          
          // Refresh the display
          displayTranslation(currentTranslation);
          
          // Show download all button if this was the first audio
          const hasAudio = currentTranslation.translations.some(t => t.audioGenerated && t.audioUrl);
          if (hasAudio) {
            $('#downloadAllBtn').show();
          }
          
          showAlert(`Audio generated successfully for ${translationData.languageName}!`, 'success');
        } else {
          throw new Error(data.message || 'Audio generation failed');
        }
        
      } catch (error) {
        console.error('Retry audio generation error:', error);
        showAlert(`Failed to generate audio for ${language}: ${error.message}`, 'danger');
      } finally {
        retryBtn.prop('disabled', false).html(originalText);
      }
    }
    
    // Alert function
    function showAlert(message, type) {
      $('.custom-alert').remove();
      
      const alertHtml = `
        <div class="alert alert-${type} alert-dismissible fade show custom-alert" role="alert">
          <i class="fas fa-${getAlertIcon(type)} me-2"></i>
          ${message}
          <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
      `;
      
      $('main .container').prepend(alertHtml);
      
      setTimeout(() => {
        $('.custom-alert').alert('close');
      }, 5000);
    }

    function getAlertIcon(type) {
      const icons = {
        'success': 'check-circle',
        'danger': 'exclamation-circle',
        'warning': 'exclamation-triangle',
        'info': 'info-circle'
      };
      return icons[type] || 'info-circle';
    }
    
    // Helper function for language flags
    function getLanguageFlag(language) {
      const flags = {
        'zh-CN': 'üá®üá≥',
        'ru': 'üá∑üá∫', 
        'pl': 'üáµüá±',
        'es': 'üá™üá∏',
        'pt': 'üáµüáπ',
        'de': 'üá©üá™',
        'fr': 'üá´üá∑',
        'ja': 'üáØüáµ',
        'ko': 'üá∞üá∑'
      };
      return flags[language] || 'üåê';
    }

